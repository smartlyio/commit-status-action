name: 'Create pending github commit statuses'
description: Update a pending commit status context with the final result

inputs:
  github-token:
    description: "Github authentication token"
    required: true
  github-needs:
    description: >-
      "needs" object from github actions as JSON format.

      MUST be passed as the github templated toJson(needs)
    required: true
  context:
    description: "Github status context"
    default: continuous-integration/github-actions/status
  target-url:
    description: "URL to include in the status"
    default: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  sha:
    description: >-
      The git commit sha to attach the status to.  This should be
      provided from the `commit_status_sha` output of the create
      action from this same repository.
    required: true

runs:
  using: "composite"
  steps:
    - name: Get final commit status
      id: commit_status
      shell: bash
      env:
        GITHUB_NEEDS: ${{ inputs.github-needs }}
      run: |
        set -eu -o pipefail

        cat > update_commit_status-needs.json <<EOFNEEDS
        ${GITHUB_NEEDS}
        EOFNEEDS

        ERROR=error
        CANCELLED=cancelled
        FAILURE=failure
        SUCCESS=success

        function countbyStatus() {
          local status="$1"
          local with_status=
          local count=0
          with_status="$(jq '. | with_entries(select(.value.result == "'"$status"'"))' <update_commit_status-needs.json)"
          echo "$with_status" 1>&2
          count="$(echo "$with_status" | jq '. | length')"
          echo "$count"
        }
        function jobsWithStatus() {
            local status="$1"
            jq -r '. | to_entries | .[] | select(.value.result == "'"$status"'") | .key' <update_commit_status-needs.json | tr $'\n' ' '
        }
        function jobsStatuses() {
            jq -r '. | to_entries | .[] | .key + ": " .value.result' <update_commit_status-needs.json | tr $'\n' '; ' | sed 's/; $//'
        }
        successes="$(countbyStatus "$SUCCESS")"
        failures="$(countbyStatus "$FAILURE")"
        cancelled="$(countbyStatus "$CANCELLED")"
        if [[ "$cancelled" -gt 0 ]]; then
          final_result="$ERROR"
          description="Build ended as 'error' with one or more cancelled stages: $(jobsWithStatus "$CANCELLED")"
        elif [[ "$failures" -gt 0 ]]; then
          final_result="$FAILURE"
          description="Build ended as 'failed' with one or more failed stages: $(jobsWithStatus "$FAILURE")"
        elif [[ "$successes" -eq 0 ]]; then
          final_result="$ERROR"
          description="Build encountered unknown error with no successful stages reported. Job statuses are $(jobsStatuses)"
        else
          final_result="$SUCCESS"
          description="Build succeeded"
        fi
        echo status="$final_result" >> "$GITHUB_OUTPUT"
        echo description="$description" >> "$GITHUB_OUTPUT"

    - name: Update commit status
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        TARGET_URL: ${{ inputs.target-url }}
        COMMIT_STATUS_SHA: ${{ inputs.sha }}
        DESCRIPTION: ${{ steps.commit_status.outputs.description }}
        CONTEXT: ${{ inputs.context }}
        STATUS: ${{ steps.commit_status.outputs.status }}
      run: |
        set -eu -o pipefail

        declare -a ARGS
        if [[ -n "$TARGET_URL" ]]; then
            ARGS=("-f" "target_url=${TARGET_URL}")
        fi

        gh api "/repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_STATUS_SHA}" \
           -XPOST \
           -f state="$STATUS" \
           -f description="$DESCRIPTION" \
           -f context="$CONTEXT" \
           "${ARGS[@]}"
